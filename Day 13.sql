DECLARE @input varchar(max)='.###...####..
###...#....#.
###...#....#.
.###...####..
###.#........
#####.#....#.
##.#..######.
####.#..##..#
..#....####..
#.##.##.##.##
#.#...#.##.#.
.###.##.##.##
#.#....#..#..
..###.##..##.
##.#..#....##

....#..#####...
....#.##.#..##.
......#.#.###..
.##........##.#
######..#..#.#.
....#.#.#.#..#.
#..##...#...###
.##..###.######
.##..#.#.#....#
.##...####.#.##
.....#....#####
.....#....#####
.##...######.##
.##..#.#.#....#
.##..###.######
#..##...#...###
....#.#.#.#..#.

.#..#..####
.#....#.###
...#####..#
##..#.#.###
.####.###..
.#.#..#####
##.##..##..
##.##..##..
.#.#..#####

#..##...###
#..##..#...
#..##..#...
#..##...###
#####..#.##
#.##..#####
#..####.#.#
.##.#.#.#..
.....#####.
####..#####
#..#.#.###.
#..#.#..#.#
#..#.##....

....#.#
####.##
....#..
...##..
.##....
......#
.##....
######.
.##..#.
#..#..#
####.##
.##...#
.##...#
####.##
#..#..#
.##..#.
######.

..##..##.....#...
.##.#..###..#..#.
###...###.#...##.
#..#.###...#.###.
#..#.###...#.###.
###...###.#..###.
.##.#..###..#..#.
..##..##.....#...
#..#..#.#.#.#.##.
#.#..##.##..#.#.#
##....####.####..
##.###.#.#.#####.
##.###.#.#.#####.

##..##.
#.#.##.
#.#.##.
##..##.
###.#.#
.#.#..#
..#...#
..##...
.##...#
.##.#.#
.##.#.#
.##.#.#
..##...

##########....##.
##.#..#.###.#.##.
...####...##..##.
#.######.#.##....
##.####.###.#...#
##......##.#.#..#
.#..##..#.##.#..#
##..##..###.##..#
#...##...########
....##....####..#
..######..#.##..#
...#..#....#..##.
.#.#..#.#.####..#

.##..##
#.#####
..#.###
#.###..
####...
#####..
#.###..
..#.###
#.#####
.##..##
...#...

.##...#..##.##.
.#.#######..#..
.##..##.##.#.##
.##.##.#..###.#
.##.##.#..###.#
.##..##.##.#.##
.#.#######..#..
.##...#..##..#.
..######.###...
##.#.#.##.#..#.
#.#...####.#...
#.#...####.#...
##.#.#.##.#..#.

.##.##.##....
....#.##.####
....#.##.####
.##.##.##....
####.#.##....
....#.###.#.#
.#.#.###.....
###.#....####
.##.####..###
.##.####..###
###.#....####
.#.#.###.....
..#.#.###.#.#
####.#.##....
.##.##.##....

#.##....#.#.#
#..#.######..
...##..###.##
....#..###.##
#..#.######..
#.##....#.#.#
.#.....#.##..
....#.##..#.#
....#.##..#.#
.#.....#.##..
#.##....#.#.#
#..#.######..
....#..###.##

#.##...#.....
.##.###.#..#.
##..#.##..##.
.#.#.#...####
..#.###.##.#.
###.##.####.#
###.##.####.#
..#.###.##.#.
.#.#.#...####
##..#.##..##.
.##.###.#..#.
#.##.#.#.....
.#.###...#.##
.....##.##.#.
.....##.##.#.
.#.###...#.##
#.##.#.#.....

#...###.#
##.#..##.
.##..#..#
#....###.
#....###.
.##..#..#
##.#..##.
#...###..
#...###..
##.#..##.
.##..#..#

##.#..##..#.###
###........###.
###........###.
##.#..##..#.###
##.#..##..#..#.
..##.####.##...
..............#
..##..##..##..#
###........###.
##....##....###
####..##..#####
#...##..##...#.
#..##.##.##..#.

####.##
...#.##
...#.##
.###.##
#.#....
#..#...
####.##
.#..###
##..###
##.#.##
..##.##

###.###..###.##
..############.
...#..####..#..
..#.########.#.
....##.##.##...
..##.##..##.##.
##.#........#.#
...#..####..#..
##.#..####..#.#
##.##......##.#
##...#.##.#...#
.....#.#..#....
#####.#..#.####
##.#.##..##.#.#
##..########..#
##..#.####.#..#
....#.#..#.#...

#.#.#.####.
##...#.....
.##......##
.##......##
##...#.....
#.#.######.
#....#.....
##.########
...##.....#
.#.#.#.....
.#.#.#.....

##.###..#.#
#..###..#.#
.#...###.#.
..##...#..#
###.#..###.
###.#..###.
..##...#..#

..#.#..
..#.#..
.##....
.##..#.
..#...#
####.#.
#.#....
##.#...
##.#...
#.#....
####.#.
..#.#.#
.##..#.

###..##
.##..#.
#####..
#####..
.##..#.
###..##
..#####
.#.####
.#..###

.#....##....#
.#.##.##.##.#
#.#..#..#..#.
...##....##..
##....##....#
#.#..#..#..#.
#............
..###....###.
###..####..##
##....##....#
..#..#..#..#.
###..####..##
##.##.##.##.#

.........##.###
.........##.###
###.#.#..#....#
......#...###.#
#.#......##.##.
.##.######...#.
#######....####
######.##.....#
#.#...##..#####
####..##..#..##
##.######.#.#.#
##...##..###...
...#.....#.###.
...#.......###.
##...##..###...

......#....#..#..
..##......#....#.
...#.###.########
.....##.#........
.##....#.........
..###..##........
..#.##...########
###..##.#.#.##.#.
###..##.#.######.

....#...#.#..
##...####...#
#.##...#.##..
#.##...#.##..
##...####...#
....#...#.#..
##...#..#.#.#
#.#.#.#..####
#.#..##..##.#
.####.#.#....
###...##.##..
###..###.##..
.####.#.#....

...####
..#.##.
....##.
##....#
##.##..
##.##..
##....#
..#.##.
..#.##.
...####
...###.
..#..##
..#.###
##..#.#
..##.#.
##.#.##
...#..#

#....#...#.#.##.#
##..##...###.#.##
##..###...#......
.####.#.##.##...#
......#.#...##..#
#....###.#.####.#
.......##...#...#
######.#.#...###.
.#..#.##..##...#.
.#..#..##...#...#
.#..#..##...#.#.#

.#.#..#
.#.#..#
#.##...
#...##.
.#.####
.#..##.
.#..##.
####..#
##.....

#....#...
.#...#..#
.#...#..#
#....#...
.#....##.
..#######
..#####.#
.#....##.
#....#...

.###..###
.#.###.##
#.#.#.###
.##..##..
#........
#.#.##.##
.####.###
.##......
.##..#.##
#.###..##
.####..##
....##...
###..##..
.##..##..
....##...

..#..##
..#..##
..#...#
#...###
###.#.#
#.#.#..
.#.#.##
.#.#.#.
#.#.#..
###.#.#
#...###

..####..##....##.
........##....##.
########.#....#.#
.#....#.#.####.#.
#.####.#........#
##.....###....###
##....##.##..##.#
##....##.######.#
##....###......##
..####..#.#..#.#.
##.##.##..#..#..#

#....###.....###.
#....###.....###.
.##.#.#...#..####
######.#..##...##
..##..###...#.###
..###..###....###
.###.#.#.#..#.###
.###.#.#.#..#.###
..###..###....###
..##..###...#.###
######.#..##...##
.##.#.#...#..####
#....###.....##..

#.###....#.#..#
........###....
........###....
#.###....#.#..#
.#.#..#.#.#...#
....#.#...#....
.#.#...#.#...##
.....#.#.######
###....##.###.#
###....##..##.#
.....#.#.######

#..##..##
.##..####
#######..
.....##..
.##......
....###..
#####..##
.......##
##.#...##
#..#..###
.....####
#####....
#..#.....

#.####.##.#
#.####.##..
###..##.#..
..#.#..#..#
##.#...#.#.
#.###..##.#
#.###...#..
.#....##.##
..##.##.#..
##.##...###
##.##...###
..##.##.#..
.#....##.##
#.###...#..
#.###..##.#

.###..###....
...#.#..#..##
...##........
...##........
...#.#..#..##
.###..###....
#.#.#.#.#####
......###.##.
#.####...#...
#.###.##.....
#.....##...##
.#..#.#...#..
#..#.##.###..

.#.#.##..#.#####.
.#.#.##..#.#####.
..##.#.###.#..##.
#.####..#....###.
#.#.##.##.####.#.
.###..#...#..#..#
.##...#...#..#..#
#.#.##.##.####.#.
#.####..#....###.

####...
....#..
...##..
#..#.##
#..#..#
....##.
....##.

###.#........
###.#........
.....###..###
.#.##.##..##.
.##...#.##.#.
##..#..####..
#..#.#.####.#
#..####....#.
#....#..##..#
.#.###......#
.#.#.#......#
.#.####.##.##
#.####.#..#.#
......######.
##.####.##.##
..###.##..##.
#####.######.

.#.##..####..##
#...#.#.##.#.#.
#...#..####..#.
#...#..####..#.
#...#.#.##.#.#.
.#.##..####..##
#..#...####...#
.###...####...#
#.##..##..##..#
#..##.##..##.##
#.##.###..###.#
..#...##..##...
.#.#....##....#
.##..#..##..#..
##...#......#..
.#....#....#...
##.#....##.#..#

#......######
..####..#..##
.##..##..#..#
#..##..##.###
#..##..##.###
.##..##..#..#
..####..#..##
#......######
.##..##.....#
..#..#..##...
##.##.##..##.
....#....#.##
.#.##.#.#....
.#.##.#..###.
.........##.#

#######.##.##
#.##.#.#.##..
##..####.....
..##....###.#
##..###..#...
#....#...#...
......##.....

#..####..#...
...#..#....##
....##.....##
..#....#..#..
....##......#
..#....#..###
##..##..##.#.
..##..##.....
...#..#...###
###....###...
............#
..######...#.
............#
...####....#.
############.

.##.#####..
##.....#.#.
##..###.###
..#.#.#...#
###....#...
###......#.
.##......#.
####..#####
####..#####
.##......#.
###......#.

##.....##.....###
.####..##..####..
#.#.#.####.#.#.##
....##.##.##.....
#####......######
#..#..#..#..#..##
#.####.##.####.##
.###..#..#..###..
#..###.##.###..##
###.#..##..#.####
#.#..#####...#.##
#.#.#.#..#.#.#.##
.##.#..##..#.##..

###.##....#
..#####..##
..##.##..##
###.##....#
...#.......
.#.#.#....#
.#..#######
##.##......
###..#....#

#.#..#..#
.######..
###..###.
..#..#...
#.####.#.
#..##..#.
#.#..#.##
.#.##.#.#
###..###.
#.#..#.##
#......##
#......##
#......##
#......##
#.#..#.##

..##..####.#.#.
..##..####.#.#.
.#.#.##.##...##
##.#....#.##..#
...#...###.#.##
..##.#.#.#...##
..#.##..##..#.#
##..#####.....#
...##.##.##.#..
...#.##.##.##.#
####.#.####.#.#

.####.#..
.####.#..
..#.###..
.##.##.##
..###.###
###..#.#.
.##....##
##.#.#.#.
##.#.#.#.
.##....##
###..#.#.
...##.###
.##.##.##
..#.###..
.####.#..

..##...##
.#..#.#.#
#....###.
######..#
........#
######.#.
#.##.####
..##.....
##..##..#
......##.
.####.#.#
######.##
.#..#..##
.#..#...#
######.##

##########..##...
#..#..#..#....##.
...#..#....##....
....##....#.#..#.
.##.##.##....#.##
.##.##.##.##..###
..........#..###.

#####..#####.##.#
#.##....##.#.....
#...#..#...#..##.
#.###..###.#.....
.#..####..#.#####
##..####..###.##.
##...##...###.##.
#..######..#.....
#..######..#.####
.#..####..#......
...##..##...#.##.
#.#.#..#.#.##....
.###....###..#..#
.##.#..#.##.#....
#####..#####.....

#.#.##.###.#...
##.....#.##.###
...#.##....#...
#......####.###
##.....####.###
...#.##....#...
##.....#.##.###
#.#.##.###.#...
#######..#...##
.##.#..#.###...
..#.#.#########

#..##....####....
#..##....###.....
.###########.....
...##.#.#....###.
....##..#.#..#.##
....##..#.#..#.##
...##.#.#....###.
.###########.....
#..##....###.....
#..##....####....
.#.#.#..#.#......
..#.####..##..#.#
....#..##.#..#...

##........###
####....####.
###.#..#.####
..###..###..#
..##....##..#
.##########..
###.#..#.####
..###..###...
..#..##..#..#

#.##..##.#.#.#.
.#..##..#.###.#
.#..##..#.###.#
#.##..##.#.###.
#.######.###.##
...#..#...#####
#..#..#..##....
#.##..##.#.#.#.
..######..###.#

#.######.##.#
##..##...##..
#....#.##..##
.##....#....#
..#....#....#
#....#.##..##
##..##...##..
#.######.##.#
#.##.###....#

..##.##..
####.#..#
#.#...#..
..#......
.##......
#.#...#..
####.#..#
..##.##..
.###.#.##
#..##....
.###..###
...####..
#####.##.
#..#.##.#
#..#.##.#

..#.#..######
#..#..###.#..
#..####.#..#.
##..##.....##
...###...#.##
###.#....####
######.##.#..
.##.###.##.##
.##.#.#######
.#.#.#..##...
.#.#####.####
.#.#####.####
.#.#.#..##...

#...#..#...#.#.
#...##.##..###.
.##.#...##.#...
.##.#...##.#...
#...##.##..###.
#...#..#...#.#.
##.#...###.####
...#.#.#.##....
#.#...######.#.
#..##...#####.#
.###.#.###.#.##
.###.#.###.#.##
#..##...#####.#
#.#...####.#.#.
...#.#.#.##....
##.#...###.####
#...#..#...#.#.

..##...#.#..###
..##...#.###...
.#..#....###.#.
....#..#..#.###
.......##.##.#.
##..##...#.##..
#######.#.##..#
#######.#.##..#
##..##...#.##..
.......##.##.#.
....#..#..#.###

.##...#.#####
.##.#.#.#.###
###.#.#.#.###
.##...#.#####
....#..#..#..
#######..##..
###.....#.#..
###...#.###..
#.#..#.###...
.###.#.#..#..
#.##.##.#..##

#...#..##.###
#.#.#.##.#..#
##.##..#..#..
####.#..##.##
...##.#.##.##
##.#....#.#..
#..##.#...#..
#..#.##.#....
..#........##
..#........##
#..#.##.#....

######.#..##.##.#
..#######.#...##.
.#####.#.#.#...##
#.##..#.######...
.##..#..#.#..####
.###..###..##...#
#...######..#.###
####.#.#..##..#.#
####.#.#..##..#.#
#...######..#.###
.###..###..##...#
.##..#..#.#..####
#.##..########...
.#####.#.#.#...##
..#######.#...##.
######.#..##.##.#
######.#..##.##.#

#.##..##.####
..#.##.#.....
###.##.######
#.#....#.####
#.##..##.####
..#....#..##.
.########.##.
.###..###.##.
#..####...##.
#..#..#..#..#
##......#####
####..####..#
..#.##.#.....
..#.##.#..##.
###.##.###..#
..##..##..##.
.###..###.##.

##....###.#######
##....###..######
.##.#.##..###.#.#
###..####.#.#####
##.########..#.##
#.##.##...#.#.##.
.#...#.........#.
.#...#.........#.
#.##.##...#.#.##.
##.########..#.##
###..####.#.#####
.##.#.##..###.#.#
##....###..######
##....###.#######
.###..###########
###..##..##..###.
#.#....#..#.#.###

#.##..#
..#....
.###..#
#...##.
.#.####
.#.####
#...##.
.###..#
..#....
#.##..#
#.#####
#.###.#
##.#..#

.#.#.####.#.##.##
...#.####.#.##.##
....#....#...#.##
#..##.##.###...#.
#..##..#......#.#
.###..#.##.#.####
.#...#.##.##.##.#
#..##.##.#..#..#.
#.....##.#.######
..##....#..#...##
.....#.#...#....#
.....#.#...#....#
..##....#..#...##

####..#
...####
.##....
###....
..#.##.
###.##.
###.##.
..#.##.
#.#....

..#.#....#.#.
##...#..#...#
....#.##.....
..#...##...#.
..##########.
###.##..##.##
####......###
..#........#.
##.########.#

#.#.##...####..#.
.#####.###.#.####
....###.##.......
.###.#.#..##.#.#.
##.#.###.##..###.
##.#.###.##..###.
.###.#.#..##.#.#.
....###.##.#.....
.#####.###.#.####
#.#.##...####..#.
.#..##.....####.#
#.##...#.##..####
#.##...#.##..####
.#..##.....####.#
#.#.##...####..#.

..##..#.#..#.##
..#.#..##..####
##.#...###....#
..####.#.#.#.##
..####.#.#.#.##
##.#...###....#
..#.#...#..####
..##..#.#..#.##
.....##.#...#..
####...##...###
..#...##...####
##.....#.#..###
##...####..##..
..##.#####.##.#
##.#.##..#.#.##
..##......#.#..
....#..#.####..

.#.####
####.#.
##.###.
..##..#
##..#.#
...#.#.
####..#
####..#
...#.#.

##......#.....#..
.#.###..##..#..#.
....###.#.######.
..##.###....#####
##.#.#.##..######
...#######.#..###
..#...#.##.#..###
..#...#.##.#..###
...#######.#..###

.##.###
.#..###
.##.#..
###.#.#
.#.#..#
#.####.
##..#.#
#.###.#
######.
#.####.
#....#.
#....#.
#.####.

##..##..##..###
#....#..#....##
..#.#.##.#.#...
#####.##..#####
###.##..##.####
#.....##.....##
#####.##.######

.#..##.#..#
####.##.##.
...##.#.##.
#.#....##..
##..#######
.#.#..#..##
.#.#..#.###
.........#.
##..#......
##..#......
.........#.
.#.#..#.###
.#.#..#..##

.##..#.##........
##..##....##..##.
##.###....##..##.
.##..#.##........
.###..##.###..###
...##..#...####..
##.#.##.#.#....#.
#####..##..#..#..
...##.###.#.##.#.
##.#...###.####.#
.#..##.#...#..#..
....####....##...
...#..##.###..###

#..######.##.##
....#..###..###
....#..###..###
#..######.##.##
##.###..######.
#......#.#..#.#
.#.#.##########
##.###.#......#
####.####.##.##
#...##..#######
#...#.####..###

.#......#.#
..#.##.#..#
#..#..#..#.
.##.##.##..
.#......#..
##......###
.#.#..#.#..
....##....#
##......###
#..#..#..#.
#..####..##
..........#
##.#######.
..#.##.#..#
..#.##.#..#

..######..###
###....####..
####..####...
.#.####.#...#
#.#....#.#...
#........#...
#........#...
##......##...
#........#...

.#..####...##.##.
##.#.#.#...#.##.#
####.##..#.##..##
#.....#.#..##.##.
#####.#####.####.
#####.#####.####.
#.....#.#..##.##.
####.##..#.##..##
##.#.#.#...#.##.#
.#..####...#####.
.#.##..###.#..#..
#..#.#..#....#.#.
#.##..####..#.##.
##..##.#.###.#.##
##..##.#.###.#.##
#.##..####..#.##.
#..#.#..#....#.#.

...#.##..####
.#.#...#..#.#
#.#########.#
#.#..##..#...
####..#.###.#
####....###.#
#.#..##..#...
#.#########.#
.#.#...#..#.#
...#.##..####
......#..#..#
......#..#..#
...#.##..####

.....##..##......
...##.....###...#
#.#.########.#.#.
.####..##..####.#
#####.####.#####.
#####.####.#####.
.####..##..####.#

#..#..##..#
....#....#.
#..#..##..#
.....####..
.##........
.....####..
....######.
.##.##..##.
#....#..#..
....##..##.
.##.#....#.

...##....#.##..##
#...#.#..##......
.##.##..#...##...
.###.#.....#.#...
##.#...#.#.##.#.#
##.#...#.#.##.#.#
.###.#.....#.#...
.##.##..#...##...
#...#.#..##......
...##....#.##..##
.#...#.#.#.###...
...#.###..#....##
...#.####.#....##

##.##..###.#.
##.##..###.#.
..##..#......
#..##.#######
###.##.#....#
..#.###..##..
#.#.#.#......
.....####..##
.....####.###
#.#.#.#......
..#.###..##..

###..##
###..##
.#.#.##
.##.#.#
##..###
.#..###
..#.#..
.####..
.##..##
.##.#..
#.###..

#......####.##.##
..##.##..###..###
..##..#..###..###
#......####.##.##
#..###.###......#
..#.#...####..###
..#..#####.#..#.#
.##.#.#..##....##
...#.####..#..#..
##.#..#.#..####..
#.#.#.#.##......#

.##.#####.##...
.#.#.##..###.##
.#.#.##..###.##
.##.########...
###.##.#.##.###
#####..#.#...##
....##...#.####
.##.##.#.#.####
#.#..#######.##

###..###..##.
..####..#....
#.#..#.#.####
#.#..#.###..#
###..########
#.####.#####.
##.##.##.....
.##..##.#....
#.#..#.##....
.#....#......
.#....#.#.##.

#..#.##.#..####..
.#........#.#..#.
.####..####..##..
###.#..#.#####.##
#..........###...
#..........###...
###.#..#.#####.##
.####..####..##..
.#........#.#..#.
#..#.##.#..####..
#.#..##.##.####.#

##.###..##.
##.##...##.
..##....#.#
###.####.##
...####.###
###.##.#.#.
##.###.#...

###.#####..
#######...#
##..##.##.#
.#..#..#.#.
..##..#.#..
#.##.#..##.
##..##.#...
........#..
#.##.######
.####....#.
######....#
######....#
.####....#.

#..###.#.
###..##..
...#.##.#
#..#..###
#..#..###
...#.##.#
###..##..
#..###.#.
.#.#####.
#..##.#..
.#.#.#...
.#.#.#.##
###.#..##
##...##.#
.#...##.#

....###.##.
.##..#####.
....#...#.#
.##.....##.
.....###..#
......#.###
......#.###
.....###..#
.##.....##.
....#...#.#
.##..####..
....###.##.
#..##.#....
#####.#.###
.##.#####..
.....#..#..
.##.#..#..#

.#.##.#..#.##.#.#
#.####....####.##
###..######..####
#.....##.#.....#.
#....#.##.#....#.
####.######.####.
...####..####...#
#...#.####.#...##
#...#.####.#...##
...####..####...#
####.######.####.

###..#..#..######
#.#...##...#.##.#
##..#.##.#..####.
...##....##......
#.##.#..#.##.##.#
####..##..#######
#.#.##..##.#.##.#
#.####..####.##.#
##.###..###.####.
.###......###..##
#.#..####..#.####
##..#....#..####.
.#.#.#..#.#.#..#.
###..#..#..######
.##.#.##.#.##..##
#.#.#....#.#.##.#
#..#..##..#..##..

.#..##..#.#..#.#.
.#..##..#......#.
#..###...##..##..
.##.##.##..##..##
.#.####.#..##..#.
..#....#..#..#..#
.##.##.##.#..#.##
#.#.##.#.#.##.#.#
###....##########
##.#..#.###..###.
...#..#...#..#...
#.##..##.#....#.#
.##.##.##.#..#.##';




DECLARE @maps TABLE (
    map_no          smallint NOT NULL,
    x               tinyint NOT NULL,
    y               tinyint NOT NULL,
    [state]         bit NOT NULL,
    corrected       tinyint NOT NULL,
    PRIMARY KEY CLUSTERED (map_no, y, x)
);

INSERT INTO @maps (map_no, x, y, [state], corrected)
SELECT src.map_no,
       x.[value] AS x,
       src.y,
       (CASE SUBSTRING(src.[value], x.[value], 1)
        WHEN '.' THEN 0
        WHEN '#' THEN 1 END) AS [state],
       0 AS corrected
FROM (
    SELECT SUM((CASE WHEN ss.[value]='' THEN 1 ELSE 0 END)) OVER (ORDER BY ss.ordinal ROWS UNBOUNDED PRECEDING) AS map_no,
           ss.ordinal-MAX((CASE WHEN ss.[value]='' THEN ss.ordinal ELSE 0 END)) OVER (ORDER BY ss.ordinal ROWS UNBOUNDED PRECEDING) AS y,
           ss.[value]
    FROM STRING_SPLIT(REPLACE(@input, CHAR(13), ''), CHAR(10), 1) AS ss
    ) AS src
CROSS APPLY GENERATE_SERIES(1, CAST(LEN(src.[value]) AS int), 1) AS x;







--- Part 1:




--- Vertical:
SELECT 'Vertical', 100*SUM(x.from_row+x.row_count/2-1)
FROM (
    SELECT map_no, MAX(y) AS row_count, MAX(x) AS col_count
    FROM @maps
    GROUP BY map_no
) AS m
CROSS APPLY GENERATE_SERIES(1, CAST(m.row_count AS int)/2, 1) AS gs
CROSS APPLY (
    VALUES (1, 2*gs.[value]),
           (m.row_count+1-2*gs.[value], 2*gs.[value])
) AS x(from_row, row_count)
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY y DESC, x) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value
    FROM @maps
    WHERE map_no=m.map_no AND y BETWEEN x.from_row AND x.from_row+x.row_count/2-1
) AS rows_preceding
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY y, x) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value
    FROM @maps
    WHERE map_no=m.map_no AND y BETWEEN x.from_row+x.row_count/2 AND x.from_row+x.row_count-1
) AS rows_following
WHERE rows_preceding.map_string=rows_following.map_string

UNION ALL

--- Horizontal:
SELECT 'Horizontal', SUM(x.from_col+x.col_count/2-1)
FROM (
    SELECT map_no, MAX(y) AS row_count, MAX(x) AS col_count
    FROM @maps
    GROUP BY map_no
) AS m
CROSS APPLY GENERATE_SERIES(1, CAST(m.col_count AS int)/2, 1) AS gs
CROSS APPLY (
    VALUES (1, 2*gs.[value]),
           (m.col_count+1-2*gs.[value], 2*gs.[value])
) AS x(from_col, col_count)
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY x DESC, y) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value
    FROM @maps
    WHERE map_no=m.map_no AND x BETWEEN x.from_col AND x.from_col+x.col_count/2-1
) AS cols_preceding
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY x, y) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value
    FROM @maps
    WHERE map_no=m.map_no AND x BETWEEN x.from_col+x.col_count/2 AND x.from_col+x.col_count-1
) AS cols_following
WHERE cols_preceding.map_string=cols_following.map_string;


















--- Part 2:






--- Vertical corrections:
UPDATE maps
SET maps.[state]=1-maps.[state], maps.corrected=2
FROM (
    SELECT map_no, MAX(y) AS row_count, MAX(x) AS col_count
    FROM @maps
    GROUP BY map_no
    HAVING MAX(CAST(corrected AS tinyint))=0
) AS m
CROSS APPLY GENERATE_SERIES(1, CAST(m.row_count AS int)/2, 1) AS gs
CROSS APPLY (
    VALUES (1, 2*gs.[value]),
           (m.row_count+1-2*gs.[value], 2*gs.[value])
) AS x(from_row, row_count)
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY y DESC, x) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value, MIN(y) AS start_y, MAX(y) AS end_y
    FROM @maps
    WHERE map_no=m.map_no AND y BETWEEN x.from_row AND x.from_row+x.row_count/2-1
) AS rows_preceding
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY y, x) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value, MIN(y) AS start_y, MAX(y) AS end_y
    FROM @maps
    WHERE map_no=m.map_no AND y BETWEEN x.from_row+x.row_count/2 AND x.from_row+x.row_count-1
) AS rows_following
CROSS APPLY (
    SELECT MIN(n.[value]-1) AS offset,
           MIN(n.[value]-1)%m.col_count+1 AS x,
           MIN(n.[value]-1)/m.col_count+rows_following.start_y AS y,
           COUNT(*) AS difference_count
    FROM GENERATE_SERIES(1, CAST(LEN(rows_preceding.map_string) AS int), 1) AS n
    WHERE SUBSTRING(rows_preceding.map_string, n.[value], 1)
        !=SUBSTRING(rows_following.map_string, n.[value], 1)
      AND ABS(rows_preceding.sum_value-rows_following.sum_value)=1
    HAVING COUNT(*)=1   --- Only one single difference allowed
) AS diff
INNER JOIN @maps AS maps ON maps.map_no=m.map_no AND maps.x=diff.x AND maps.y=diff.y;




--- Horizontal corrections:
UPDATE maps
SET maps.[state]=1-maps.[state], maps.corrected=1
FROM (
    SELECT map_no, MAX(y) AS row_count, MAX(x) AS col_count
    FROM @maps
    GROUP BY map_no
    HAVING MAX(CAST(corrected AS tinyint))=0
) AS m
CROSS APPLY GENERATE_SERIES(1, CAST(m.col_count AS int)/2, 1) AS gs
CROSS APPLY (
    VALUES (1, 2*gs.[value]),
           (m.col_count+1-2*gs.[value], 2*gs.[value])
) AS x(from_col, col_count)
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY x DESC, y) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value, MIN(x) AS start_x, MAX(x) AS end_x
    FROM @maps
    WHERE map_no=m.map_no AND x BETWEEN x.from_col AND x.from_col+x.col_count/2-1
) AS cols_preceding
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY x, y) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value, MIN(x) AS start_x, MAX(x) AS end_x
    FROM @maps
    WHERE map_no=m.map_no AND x BETWEEN x.from_col+x.col_count/2 AND x.from_col+x.col_count-1
) AS cols_following
CROSS APPLY (
    SELECT MIN(n.[value]-1) AS offset,
           MIN(n.[value]-1)%m.row_count+1 AS y,
           MIN(n.[value]-1)/m.row_count+cols_following.start_x AS x,
           COUNT(*) AS difference_count
    FROM GENERATE_SERIES(1, CAST(LEN(cols_preceding.map_string) AS int), 1) AS n
    WHERE SUBSTRING(cols_preceding.map_string, n.[value], 1)
        !=SUBSTRING(cols_following.map_string, n.[value], 1)
      AND ABS(cols_preceding.sum_value-cols_following.sum_value)=1
    HAVING COUNT(*)=1   --- Only one single difference allowed
) AS diff
INNER JOIN @maps AS maps ON maps.map_no=m.map_no AND maps.x=diff.x AND maps.y=diff.y;


















--- Vertical:
SELECT 'Vertical', 100*SUM(x.from_row+x.row_count/2-1)
FROM (
    SELECT map_no, MAX(y) AS row_count, MAX(x) AS col_count,
           MAX((CASE WHEN corrected>0 THEN y ELSE 0 END)) AS corrected_y
    FROM @maps
    GROUP BY map_no
) AS m
CROSS APPLY GENERATE_SERIES(1, CAST(m.row_count AS int)/2, 1) AS gs
CROSS APPLY (
    VALUES (1, 2*gs.[value]),
           (m.row_count+1-2*gs.[value], 2*gs.[value])
) AS x(from_row, row_count)
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY y DESC, x) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value
    FROM @maps
    WHERE map_no=m.map_no AND y BETWEEN x.from_row AND x.from_row+x.row_count/2-1
) AS rows_preceding
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY y, x) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value
    FROM @maps
    WHERE map_no=m.map_no AND y BETWEEN x.from_row+x.row_count/2 AND x.from_row+x.row_count-1
) AS rows_following
WHERE rows_preceding.map_string=rows_following.map_string
  AND m.corrected_y BETWEEN x.from_row AND x.from_row+x.row_count-1

UNION ALL

--- Horizontal:
SELECT 'Horizontal', SUM(x.from_col+x.col_count/2-1)
FROM (
    SELECT map_no, MAX(y) AS row_count, MAX(x) AS col_count,
           MAX((CASE WHEN corrected>0 THEN x ELSE 0 END)) AS corrected_x
    FROM @maps
    GROUP BY map_no
) AS m
CROSS APPLY GENERATE_SERIES(1, CAST(m.col_count AS int)/2, 1) AS gs
CROSS APPLY (
    VALUES (1, 2*gs.[value]),
           (m.col_count+1-2*gs.[value], 2*gs.[value])
) AS x(from_col, col_count)
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY x DESC, y) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value
    FROM @maps
    WHERE map_no=m.map_no AND x BETWEEN x.from_col AND x.from_col+x.col_count/2-1
) AS cols_preceding
CROSS APPLY (
    SELECT STRING_AGG(CAST([state] AS varchar(100)), '') WITHIN GROUP (ORDER BY x, y) AS map_string,
           SUM(CAST([state] AS tinyint)) AS sum_value
    FROM @maps
    WHERE map_no=m.map_no AND x BETWEEN x.from_col+x.col_count/2 AND x.from_col+x.col_count-1
) AS cols_following
WHERE cols_preceding.map_string=cols_following.map_string
  AND m.corrected_x BETWEEN x.from_col AND x.from_col+x.col_count-1;






